package plug

import (
	data "UwdBot/database"
	"fmt"
	"log"
	"strings"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api"
)

var (
	CHAT_ID   int64
	UserRanks = []Rank{
		{"–ï–ø–∏—Å–∫–æ–ø", 1500},
		{"–í–ª–∞–¥–µ–ª–µ—Ü –∫–∞–∑–∏–Ω–æ", 1300},
		{"–î–∞–ª—å–Ω–æ–±–æ–π—â–∏–∫", 1100},
		{"–ö–æ—Ä–æ–ª—å", 1000},
		{"–†–∞–±–æ—Ç–∞–µ—Ç –≤ —à–∏–Ω–æ–º–æ–Ω—Ç–∞–∂–µ", 850},
		{"–î–µ–ø—É—Ç–∞—Ç –æ—Ç –Ω–∞—Ä–æ–¥–∞", 700},
		{"–ó–∞–∂–∏—Ç–æ—á–Ω—ã–π", 500},
		{"–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç", 300},
		{"–¢–æ–ª—å–∫–æ —á—Ç–æ —Å–¥–∞–ª –ï–ì–≠", 150},
		{"–ü–µ–ª—å–º–µ–Ω—å", 100},
		{"–î–Ω–∞—Ä—å", 50},
		{"–ò–∑–≥–æ–π", 0},
	}
)

type Rank struct {
	Rank       string
	Reputation int
}

func (p *Profiler) SetChatID(ID int64) {
	CHAT_ID = ID
}

func GetMarkdownUsername(username string) string {
	return strings.ReplaceAll(username, "_", "\\_")
}

func getRank(user data.User) string {
	for _, rank := range UserRanks {
		if rank.Reputation <= user.Reputation {
			return rank.Rank
		}
	}
	return UserRanks[len(UserRanks)-1].Rank
}

func (p *Profiler) unregUser(msg *tgbotapi.Message) string {
	user := data.User{}
	user.DeleteUser(msg.From.ID)
	return "–ù—É –∑–∞—Ö–æ–¥–∏ –∫–∞–∫ –Ω–∏–±—É–¥—å –µ—â–µ, —á—Ç–æ –¥–µ–ª–∞—Ç—å..."
}

func (p *Profiler) showUserInfo(msg *tgbotapi.Message) string {
	var err error
	var user data.User
	user, err = user.FindUserByID(msg.From.ID)
	if err != nil {
		log.Println(err)
	}

	var repStat, coinsStat float32
	repStat, coinsStat, err = user.GetUserStatistics()
	if err != nil {
		log.Println(err)
	}

	rank := getRank(user)

	return fmt.Sprintf(
		"***–õ–ò–ß–ù–ê–Ø –ö–ê–†–¢–û–ß–ö–ê***\n–ü—Ä–∏–≤–µ—Ç ***@%s*** - ___%s___\n–¢–≤–æ—è —Ä–µ–ø—É—Ç–∞—Ü–∏—è üëë: ***%d\n***–ú–æ–Ω–µ—Ç—ãüí∞: ***%d***\n–ë–æ–µ–≤–∞—è –º–æ—â—å: ***%d***\n–ù–∞ —Å–µ–≥–æ–¥–Ω—è –æ—Å—Ç–∞–ª–æ—Å—å ***%d*** –µ–¥–∏–Ω–∏—Ü –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏!\n\n–¢—ã –Ω–∞ ***%d***%% –∫—Ä—É—á–µ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∏ –Ω–∞ ***%d***%% –±–æ–≥–∞—á–µ!",
		user.Username,
		rank,
		user.Reputation,
		user.Coins,
		user.WeaponsPower,
		user.Activity,
		int(repStat*100),
		int(coinsStat*100),
	)
}

func (p *Profiler) AddMoneyByUsername(money int, username string) string {
	user := data.User{}
	var err error
	user, err = user.FindUserByUsername(username)
	if err != nil {
		return fmt.Sprintf(
			"–ü–æ–ª—å–∑–æ–≤–∞–∞—Ç–µ–ª—è %s –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!",
			GetMarkdownUsername(username),
		)
	}
	user.AddMoney(money)
	return fmt.Sprintf(
		"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é **@%s** –Ω–∞—á–∏—Å–ª–µ–Ω–æ **%düí∞**",
		GetMarkdownUsername(username),
		money,
	)
}

func (p *Profiler) registerNewUser(msg *tgbotapi.Message) string {
	user := data.User{}
	count, err := user.CountUsersWithID(msg.From.ID)
	if err != nil {
		return "–ß—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫..."
	}
	if count > 0 {
		return "–¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!"
	}

	user.UserID = uint64(msg.From.ID)
	user.Username = msg.From.UserName
	if len(user.Username) == 0 {
		return "–î–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–∏–¥—É–º–∞–π —Å–µ–±–µ nickname –≤ –¢–µ–ª–µ–≥—Ä–∞–º–µ! "
	}
	_, err = user.CreateNewUser()

	if err != nil {
		return "–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ..."
	}

	return "–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é. /me"
}
