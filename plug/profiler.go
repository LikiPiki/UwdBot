package plug

import (
	data "UwdBot/database"
	"fmt"
	"log"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api"
)

var (
	CHAT_ID   int64
	UserRanks = []Rank{
		{"–ö–æ—Ä–æ–ª—å", 1000, 1000},
		{"–î–µ–ø—É—Ç–∞—Ç –æ—Ç –Ω–∞—Ä–æ–¥–∞", 0, 500},
		{"–ó–∞–∂–∏—Ç–æ—á–Ω—ã–π", 500, 300},
		{"–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç", 300, 300},
		{"–¢–æ–ª—å–∫–æ —á—Ç–æ —Å–¥–∞–ª –ï–ì–≠", 150, 50},
		{"–ü–µ–ª—å–º–µ–Ω—å", 100, 100},
		{"–î–Ω–∞—Ä—å", 0, 50},
		{"–ò–∑–≥–æ–π", 0, 0},
	}
)

type Rank struct {
	Rank       string
	Coins      int
	Reputation int
}

func (p *Profiler) SetChatID(ID int64) {
	CHAT_ID = ID
}

func getRank(user data.User) string {
	for _, rank := range UserRanks {
		if (rank.Coins <= user.Coins) && (rank.Reputation <= user.Reputation) {
			return rank.Rank
		}
	}
	return UserRanks[len(UserRanks)-1].Rank
}

func (p *Profiler) unregUser(msg *tgbotapi.Message) string {
	user := data.User{}
	user.DeleteUser(msg.From.ID)
	return "–ù—É –∑–∞—Ö–æ–¥–∏ –∫–∞–∫ –Ω–∏–±—É–¥—å –µ—â–µ, —á—Ç–æ –¥–µ–ª–∞—Ç—å..."
}

func (p *Profiler) showUserInfo(msg *tgbotapi.Message) string {
	var err error
	var user data.User
	user, err = user.FindUserByID(msg.From.ID)
	if err != nil {
		log.Println(err)
	}

	var repStat, coinsStat float32
	repStat, coinsStat, err = user.GetUserStatistics()
	if err != nil {
		log.Println(err)
	}

	rank := getRank(user)

	return fmt.Sprintf(
		"–ü—Ä–∏–≤–µ—Ç ***@%s*** - ___%s___\n–¢–≤–æ—è —Ä–µ–ø—É—Ç–∞—Ü–∏—è: ***%d\n***üí∞: ***%d***\n\n–¢—ã –Ω–∞ ***%d***%% –∫—Ä—É—á–µ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∏ –Ω–∞ ***%d***%% –±–æ–≥–∞—á–µ!",
		user.Username,
		rank,
		user.Reputation,
		user.Coins,
		int(repStat*100),
		int(coinsStat*100),
	)
}

func (p *Profiler) registerNewUser(msg *tgbotapi.Message) string {
	user := data.User{}
	count, err := user.CountUsersWithID(msg.From.ID)
	if err != nil {
		log.Panicln(err)
		return "–ß—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫..."
	}
	if count > 0 {
		return "–¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!"
	}

	user.UserID = uint64(msg.From.ID)
	user.Username = msg.From.UserName
	_, err = user.CreateNewUser()

	if err != nil {
		return "–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ..."
	}

	return "–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é. /me"
}
