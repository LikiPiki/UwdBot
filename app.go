package main

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"log"
	"math/rand"
	"net/http"
	"strconv"
	"time"

	data "UwdBot/database"

	"github.com/PuerkitoBio/goquery"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api"
)

const (
	UWDChannelVideos = "https://www.youtube.com/user/uwebdesign/videos"
	poll_api_url     = "https://engine.lifeis.porn/api/millionaire.php"
	LEN              = 20
)

var (
	UserRanks = []Rank{
		{"–ö–æ—Ä–æ–ª—å", 1000, 1000},
		{"–î–µ–ø—É—Ç–∞—Ç –æ—Ç –Ω–∞—Ä–æ–¥–∞", 0, 500},
		{"–ó–∞–∂–∏—Ç–æ—á–Ω—ã–π", 500, 300},
		{"–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç", 300, 300},
		{"–¢–æ–ª—å–∫–æ —á—Ç–æ —Å–¥–∞–ª –ï–ì–≠", 150, 50},
		{"–ü–µ–ª—å–º–µ–Ω—å", 100, 100},
		{"–î–Ω–∞—Ä—å", 0, 50},
		{"–ò–∑–≥–æ–π", 0, 0},
	}
)

// for test only
type Rank struct {
	Rank       string
	Coins      int
	Reputation int
}

func GetRank(user data.User) string {
	for _, rank := range UserRanks {
		if (rank.Coins <= user.Coins) && (rank.Reputation <= user.Reputation) {
			return rank.Rank
		}
	}
	return UserRanks[len(UserRanks)-1].Rank
}

type App struct {
	Polls  []Poll
	Videos []string
	admins map[string]bool
}

func InitApp() *App {
	return &App{
		Polls: []Poll{},
		admins: map[string]bool{
			"likipiki": true,
			"websanya": true,
		},
	}
}

func (a *App) IsAdmin(username string) bool {
	return a.admins[username]
}

func (a *App) ParseVideos() {
	a.Videos = make([]string, 0)
	doc, err := goquery.NewDocument(UWDChannelVideos)
	if err != nil {
		log.Println(err)
	}
	parsed := make([]string, 0)
	doc.Find("a").Each(func(i int, s *goquery.Selection) {
		class, _ := s.Attr("class")
		link, _ := s.Attr("href")
		if class == "yt-uix-sessionlink yt-uix-tile-link  spf-link  yt-ui-ellipsis yt-ui-ellipsis-2" {
			video := fmt.Sprintf("youtube.com%s", link)
			parsed = append(parsed, video)
		}
	})
	a.Videos = parsed
}

func (a *App) UpdatePollMessage(id int, msg *tgbotapi.Message) {
	if len(a.Polls) > id {
		a.Polls[id].Message = msg
	} else {
		log.Println("Invalid id")
	}
}

func (a *App) getLastVideoLink() (string, bool) {
	a.ParseVideos()
	if len(a.Videos) > 0 {
		return a.Videos[0], true
	}
	return "", false
}

func (a *App) LoadPoll() Poll {
	req, err := http.NewRequest("GET", poll_api_url, nil)
	if err != nil {
		log.Println(err)
	}

	poll := Poll{}
	poll.members = make(map[string]int)

	q := req.URL.Query()
	q.Add("count", "1")
	value := rand.Intn(3) + 1
	q.Add("q", strconv.Itoa(value))
	req.URL.RawQuery = q.Encode()

	resp, err := http.Get(req.URL.String())

	if err != nil {
		log.Println(err)
	}

	defer resp.Body.Close()

	jsonCode, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		log.Println(err)
	}

	err = json.Unmarshal(jsonCode, &poll)
	if err != nil {
		log.Println(err)
	}
	poll.Shuffle()
	poll.Data.Time = time.Now()
	poll.Data.Solved = false
	return poll
}

func (a *App) GetPoll() int {
	poll := a.LoadPoll()
	if len(a.Polls) < LEN {
		a.Polls = append(a.Polls, poll)
		return len(a.Polls) - 1
	} else {
		for id, current := range a.Polls {
			if current.Data.Solved == true {
				a.Polls[id] = poll
				return id
			}
		}
	}
	minTime, index := a.Polls[0].Data.Time, 0
	for id, current := range a.Polls {
		if current.Data.Time.Sub(minTime).String()[0] == '-' {
			minTime = current.Data.Time
			index = id
		}
	}
	a.Polls[index] = poll
	return index
}

func (a *App) CheckNumberQuestions(num, ans int) bool {
	if (len(a.Polls) > num) && (ans < 4) {
		return true
	}
	return false
}

func (a *App) SolvePoll(num, ans int) {
	a.Polls[num].Data.Solved = true
}

func (a *App) CheckPoll(num, ans int) (bool, bool) {
	if a.Polls[num].Data.Valid == ans {
		return true, a.Polls[num].Data.Solved
	}
	return false, a.Polls[num].Data.Solved
}

// Registration and Delete account
func (a *App) RegisterNewUser(msg *tgbotapi.Message) string {
	user := data.User{}
	count, err := user.CountUsersWithID(msg.From.ID)
	if err != nil {
		log.Panicln(err)
		return "–ß—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫..."
	}
	if count > 0 {
		return "–¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!"
	}

	user.UserID = uint64(msg.From.ID)
	user.Username = msg.From.UserName
	_, err = user.CreateNewUser()

	if err != nil {
		return "–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ..."
	}

	return "–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é. /me"
}

func (a *App) UnregUser(msg *tgbotapi.Message) string {
	user := data.User{}
	user.DeleteUser(msg.From.ID)
	return "–ù—É –∑–∞—Ö–æ–¥–∏ –∫–∞–∫ –Ω–∏–±—É–¥—å –µ—â–µ, —á—Ç–æ –¥–µ–ª–∞—Ç—å..."
}

func (a *App) ShowUserInfo(msg *tgbotapi.Message) string {
	var err error
	var user data.User
	user, err = user.FindUserByID(msg.From.ID)
	if err != nil {
		log.Println(err)
	}

	var repStat, coinsStat float32
	repStat, coinsStat, err = user.GetUserStatistics()
	if err != nil {
		log.Println(err)
	}

	rank := GetRank(user)

	return fmt.Sprintf(
		"–ü—Ä–∏–≤–µ—Ç ***@%s*** - ___%s___\n–¢–≤–æ—è —Ä–µ–ø—É—Ç–∞—Ü–∏—è: ***%d\n***üí∞: ***%d***\n\n–¢—ã –Ω–∞ ***%d***%% –∫—Ä—É—á–µ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∏ –Ω–∞ ***%d***%% –±–æ–≥–∞—á–µ!",
		user.Username,
		rank,
		user.Reputation,
		user.Coins,
		int(repStat*100),
		int(coinsStat*100),
	)
}

func (a *App) GetShop(msg *tgbotapi.Message) string {
	weap := data.Weapon{}
	weapons, err := weap.GetAllWeapons()
	if err != nil {
		return "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–∞–≥–∞–∑–∏–Ω..."
	}
	reply := "***–£—é—Ç–Ω—ã–π shop üõí ***\n\n***–û—Ä—É–∂–∏–µ:***\n"
	for _, w := range weapons {
		reply += fmt.Sprintf(
			"%d) ___%s___ %düó°Ô∏è, %düí∞\n",
			w.ID,
			w.Name,
			w.Power,
			w.Cost,
		)
	}
	reply += "\n___–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Å—Ç–∞—Ñ—Ñ:___\n–ü–æ—è–≤–∏—Ç—Å—è –≤ —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏...\n\n___–ö—É–ø–∏—Ç—å —Ç–æ–≤–∞—Ä /buy –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞___"
	return reply
}
