package plugin

import (
	"context"
	"fmt"
	"regexp"
	"strconv"
	"strings"

	"github.com/LikiPiki/UwdBot/internal/pkg/database"
	"github.com/pkg/errors"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api"
)

type Rank struct {
	Rank       string
	Reputation int
}

func GetMarkdownUsername(username string) string {
	return strings.ReplaceAll(username, "_", "\\_")
}
func GetItalicUnderlineUsername(username string) string {
	return strings.ReplaceAll(username, "_", "_\\__")
}

func (p *Profiler) getRank(user database.User) string {
	for _, rank := range p.ranks {
		if rank.Reputation <= user.Reputation {
			return rank.Rank
		}
	}
	return p.ranks[len(p.ranks)-1].Rank
}

func (p *Profiler) unregUser(ctx context.Context, msg *tgbotapi.Message) (string, error) {
	if _, err := p.db.UserStorage.DeleteUser(ctx, msg.From.ID); err != nil {
		return "", errors.Wrap(err, "cannot unreg user")
	}

	return "–ù—É –∑–∞—Ö–æ–¥–∏ –∫–∞–∫ –Ω–∏–±—É–¥—å –µ—â–µ, —á—Ç–æ –¥–µ–ª–∞—Ç—å...", nil
}

func (p *Profiler) showUserInfo(ctx context.Context, msg *tgbotapi.Message) (string, error) {
	user, err := p.db.UserStorage.FindUserByID(ctx, msg.From.ID)
	if err != nil {
		return "", errors.Wrap(err, "cannot find user by id")
	}

	repStat, coinsStat, err := p.db.UserStorage.GetUserStatistics(ctx, user.Reputation, user.Coins)
	if err != nil {
		return "", errors.Wrap(err, "cannot get user stat")
	}

	rank := p.getRank(user)

	return fmt.Sprintf(
		`
*–õ–ò–ß–ù–ê–Ø –ö–ê–†–¢–û–ß–ö–ê*
–ü—Ä–∏–≤–µ—Ç *@%s* - _%s_
–¢–≤–æ—è —Ä–µ–ø—É—Ç–∞—Ü–∏—è üëë: *%d
*–ú–æ–Ω–µ—Ç—ã üí∞: *%d*
–ë–æ–µ–≤–∞—è –º–æ—â—å üèπ: *%d*
–ù–∞ —Å–µ–≥–æ–¥–Ω—è –æ—Å—Ç–∞–ª–æ—Å—å *%d* –µ–¥–∏–Ω–∏—Ü –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏!

–¢—ã –Ω–∞ *%.1f*%% –∫—Ä—É—á–µ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∏ –Ω–∞ *%.1f*%% –±–æ–≥–∞—á–µ!
`,
		user.Username,
		rank,
		user.Reputation,
		user.Coins,
		user.WeaponsPower,
		user.Activity,
		repStat*100,
		coinsStat*100,
	), nil
}

func (p *Profiler) AddMoneyByUsername(ctx context.Context, money int, username string) (string, error) {
	user, err := p.db.UserStorage.FindUserByUsername(ctx, username)
	if err != nil {
		return fmt.Sprintf(
			"–ü–æ–ª—å–∑–æ–≤–∞–∞—Ç–µ–ª—è %s –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!",
			GetMarkdownUsername(username),
		), nil
	}

	if err := p.db.UserStorage.AddMoney(ctx, user.UserID, money); err != nil {
		return "", errors.Wrap(err, "cannot add money to user")
	}
	return fmt.Sprintf(
		"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é *@%s* –Ω–∞—á–∏—Å–ª–µ–Ω–æ *%düí∞*",
		username,
		money,
	), nil
}

func (p *Profiler) registerNewUser(ctx context.Context, msg *tgbotapi.Message) string {
	count, err := p.db.UserStorage.CountUsersWithID(ctx, msg.From.ID)
	if err != nil {
		return "–ß—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫..."
	}

	if count > 0 {
		return "–¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!"
	}

	if len(msg.From.UserName) == 0 {
		return "–î–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–∏–¥—É–º–∞–π —Å–µ–±–µ nickname –≤ –¢–µ–ª–µ–≥—Ä–∞–º–µ! "
	}

	_, err = p.db.UserStorage.CreateNewUser(ctx, msg.From.UserName, uint64(msg.From.ID))
	if err != nil {
		return "–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ..."
	}

	return "–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é. /me"
}

func (p *Profiler) HandleAdminRegexpCommands(msg *tgbotapi.Message) {
	// Add money case
	re := regexp.MustCompile(`^[a|A]ddmoney (\\d+) (\\w+)$`)
	match := re.FindStringSubmatch(msg.Text)
	if len(match) == 3 {
		itemNumber, err := strconv.Atoi(match[1])
		if err != nil {
			err = p.c.SendMarkdownReply(msg, "–ö–æ–º–∞–Ω–¥–∞ –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ –≤–µ—Ä–Ω–æ, –ø—Ä–æ–±—É–π ``/addmoney 100 username``")
			if err != nil {
				p.errors <- errors.Wrap(err, "cannot send wrong command reply")
			}
			return
		}

		text, err := p.AddMoneyByUsername(context.Background(), itemNumber, match[2])
		if err != nil {
			p.errors <- errors.Wrap(err, "cannot add money by username")
			return
		}
		if err := p.c.SendMarkdownReply(
			msg,
			text,
		); err != nil {
			p.errors <- errors.Wrap(err, "cannot send MD reply")
		}
		return
	}

	// Ban user
	re = regexp.MustCompile(`^[b|B]an (\\w+)`)
	match = re.FindStringSubmatch(msg.Text)

	if len(match) == 2 {
		if err := p.db.UserStorage.SwitchBanUser(context.Background(), match[1], true); err != nil {
			p.errors <- errors.Wrap(err, "cannot ban user")
		}

		reply := fmt.Sprintf("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @%s –∑–∞–±–∞–Ω–µ–Ω!", match[1])
		if err := p.c.SendReply(msg, reply); err != nil {
			p.errors <- errors.Wrap(err, "cannot send reply")
		}

		return
	}

	// Unban user
	re = regexp.MustCompile(`^[u|U]nban (\\w+)`)
	match = re.FindStringSubmatch(msg.Text)

	if len(match) == 2 {
		if err := p.db.UserStorage.SwitchBanUser(context.Background(), match[1], false); err != nil {
			p.errors <- errors.Wrap(err, "cannot unban user")
		}

		reply := fmt.Sprintf("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @%s —Ä–∞–∑–∞–±–∞–Ω–µ–Ω!", match[1])
		if err := p.c.SendReply(msg, reply); err != nil {
			p.errors <- errors.Wrap(err, "cannot send reply")
		}

		return
	}
}
